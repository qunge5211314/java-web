一、单个参数：mybatis不会做特殊处理。
    #{参数名}：取出参数值

二、多个参数：mybatis会做特殊处理。
    多个参数会被封装成一个map
    key：param1.....paramN，或者参数的索引
    value：传入的参数值
    #{key}就是从map获取指定的key
    1、异常：
        Cause:
            org.apache.ibatis.binding.BindingException:
                Parameter 'id' not found.
                Available parameters are [arg1, arg0, param1, param2]
        操作：
            方法：User selectOneByIdAndName(Integer id, String name);
            取值：#{id}，#{name}

    2、命名参数：明确指定封装参数时map的key:@Param("customKey")
        多个参数会被封装成一个map
            key：使用@Param注解指定的值
            value：参数值
        #{customKey}就可以取出对应的参数值

    3、POJO：
        如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入POJO；
        #{属性名}：取出传入的POJO属性值

    4、Map：
        如果多个参数不是业务模型中的数据，没有对应的POJO，为了方便，我们也可以传入map

    5、TO：
        如果多个参数不是业务模型中的数据，但是经常要使用，
        推荐来编写一个TO(Transfer Object)数据传输对象
        如：Page{int index,
                int size}

=========================================思考======================================================
场景一：
    public User getUser(@Param("id")Integer id, String name);
    取值：
        id====>#{id/param1}
        name====>#{param2}

场景二：
    public User getUser(Integer id, @Param("user")User user);
    取值：
        id====>#{param1}
        name====>#{param2.name/user.name}
## 特别注意：如果是Collection(List/Set)类型或者是数组，
   也会特殊处理，也是把传入的list或者数组封装在map中。
   Key：Collection(collection)，如果是List还可以使用这个key(list)
        数组(array)
场景三：
    public User getUser(List<Integer> ids);
    取值：取出第一个id的值
        id====>#{list[0]}

========================================结合源码分析====================================
