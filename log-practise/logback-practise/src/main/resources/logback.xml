<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c %M %L %thread %m%n">
    </property>
    <property name="logDir" value="./log/">
    </property>

    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <target>
            System.err
        </target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>


    </appender>

    <appender name="fileAppender" class="ch.qos.logback.core.FileAppender">
        <file>${logDir}logback.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <appender name="rollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logDir}roll.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
            <maxFileSize>20KB</maxFileSize>
        </rollingPolicy>
    </appender>

    <appender name="consoleFilterAppender" class="ch.qos.logback.core.ConsoleAppender">
        <target>
            System.err
        </target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--配置过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--配置异步日志-->
    <appender name="asyncAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="consoleAppender"/>
    <!--
    补充说明：
        一、异步日志
            1、可配置属性<discardingThreshold>0</discardingThreshold>
            该配置表示配置了一个阈值
            当队列的剩余容量小于这个阈值的时候，当前日志级别trace、debug、info这三个级别的日志将被丢弃
            设置为0，说明永远不会丢弃trace、debug、info这三个级别的日志
            2、可配置属性<queueSize>256</queueSize>
            表示配置队列的深度，这个值会影响记录日志的性能，默认值就是256
            关于这两个属性，我们一般情况下使用默认值即可，不要乱配置，会影响系统性能，了解其功能即可
        二、关于不同的日志实现，配置也是不同的，例如log4j经常使用的是properties文件，logback经常使用的是xml配置文件
            如果我们遇到了一种情况，就是需要将以前的log4j，改造为使用logback，应该如何处理
            我们可以使用工具
            访问logback官网找到log4j.properties转换器
            只要是二者兼容的技术，才会被翻译
            如果是log4j独立的技术，logback没有，或者是有这个技术但是并不兼容
            那么这个工具则不会为我们进行翻译
    -->
    </appender>

    <root level="ALL">
        <appender-ref ref="consoleAppender"/>
<!--        <appender-ref ref="fileAppender"/>-->
<!--        <appender-ref ref="rollingFileAppender"/>-->
<!--        <appender-ref ref="consoleFilterAppender"/>-->
        <appender-ref ref="asyncAppender"/>
    </root>

    <!--自定义logger-->
    <!--additivity="false"表示不继承root logger-->
    <logger name="cn.itcast" level="WARN" additivity="false">
        <appender-ref ref="asyncAppender"/>
    </logger>
</configuration>